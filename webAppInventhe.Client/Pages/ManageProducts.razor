@page "/"
@using webAppInventhe.Shared.Model
@inject HttpClient Http
@inject IJSRuntime JsRuntime;

<h1>Manage products</h1>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Quantity</th>
                <th>Description</th>
                <th>Save</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td><input type="text" bind="@product.Name" /></td>
                    <td><input type="number" bind="@product.Quantity" /></td>
                    <td><textarea bind="@product.Description" /></td>
                    <td><button type="button" class="btn btn-primary" onclick="@(() => SaveProduct(product.Name))">Save change</button></td>
                    <td><button type="button" class="btn btn-danger" onclick="@(async () => await ConfirmDelete(product.Name))">Delete</button></td>
                </tr>
            }
        </tbody>
    </table>

    <button type="button" class="btn btn-primary" id="btnNewProduct" onclick="@(() => ChangeDisplay())">Add new product</button>

    <div id="addForm" style="@display">
        <EditForm Model="@productToCreate">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="txtName">Name</label>
                <InputText id="txtName" class="form-control" bind-Value="@productToCreate.Name" />
            </div>
            <div class="form-group">
                <label for="txtQuantity">Quantity</label>
                <InputNumber id="txtQuantity" class="form-control" bind-Value="@productToCreate.Quantity" />
            </div>
            <div class="form-group">
                <label for="txtDescription">Description</label>
                <InputTextArea id="txtDescription" class="form-control" bind-Value="@productToCreate.Description" />
            </div>
            <button type="submit" class="btn btn-primary" onclick="@(async () => await HandleValidSubmit())">Submit</button>
        </EditForm>
    </div>

    <div class="modal fade" id="ModalConfirmDelete">
        <div class="modal-dialog">
            <div class="modal-content">

                <div class="modal-header">
                    <h4 class="modal-title">Confirm delete</h4>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                </div>

                <div class="modal-body">
                    <input type="hidden" id="productToDeleteField" bind=@productToDelete.Name />
                    Are you sure you want to delete product <span id="bookTitleField"></span>?
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn" data-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" onclick=@(async () => await DeleteProduct(productToDelete.Name))>Delete</button>
                </div>
            </div>
        </div>
    </div>
}

@functions {
    private List<Products> products = new List<Products>();

    private Products productToCreate = new Products();

    private Products productToDelete = new Products();

    private string display = "display:none";

    private void ChangeDisplay()
    {
        if (display == "display:none")
        {
            display = "display:inline";
        }
        else
        {
            display = "display:none";
        }
    }

    private async Task HandleValidSubmit()
    {
        var result = Http.PostJsonAsync<Products>("api/Products/CreateProducts", productToCreate);
        products.Add(new Products
        {
            Name = productToCreate.Name,
            Quantity = productToCreate.Quantity,
            Description = productToCreate.Description
        });
        productToCreate = new Products();
    }

    protected override async Task OnInitAsync()
    {
        products = await Http.GetJsonAsync<List<Products>>("api/Products/GetProducts");
    }

    private async Task SaveProduct(string name)
    {
        var productToUpdate = products.Find(p => p.Name == name);
        var result = await Http.PutJsonAsync<Products>("api/Products/PutProducts", productToUpdate);
    }

    protected async Task ConfirmDelete(string name)
    {
        productToDelete = products.Find(p => p.Name == name);
        await JsRuntime.InvokeAsync<bool>("InventheInterop.confirmDelete");
    }

    private async Task DeleteProduct(string name)
    {
        var result = await Http.DeleteAsync($"api/Products/DeleteProducts/{name}");
        products.Remove(productToDelete);
        await JsRuntime.InvokeAsync<bool>("InventheInterop.hideDeleteDialog");
    }
}